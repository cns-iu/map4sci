{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"map4sci \u00b6 Implementation of a graph algorithm that uses a multi level tree based approach for interactive graph visualization with semantic zoom (ZMLT). The research paper can be found here. This algorithm also uses Impred which is improved Pred algorithm and it can be found here. Change Log \u00b6 See Changelog Getting Started \u00b6 1. Requirements \u00b6 python3 python3-dev java8-jdk make g++ 2. Setup virtual environment \u00b6 Run 00x-setup-venv.sh script to setup the virtual environment and install all the dependencies ./scripts/00x-setup-venv.sh To activate the virtual environment: source .venv/bin/activate For more information on the virtual environment refer to the python documentation . 3. Building \u00b6 Build the libraries by running 01x-build-libs.sh script. ./scripts/01x-build-libs.sh 4. Input \u00b6 Update the env.sh file to point to the data source config. The default data source is datasets/sample/config.sh The location of the input graph to the algorithm is path assigned to $NETWORK environment variable. This can be updated in config.sh file. The default value is: datasets/sample/network.dot This location can be changed by changing the value of $NETWORK environment variable in config.sh All the config.sh files should follow the format as given in config.example.sh 5. Run \u00b6 Run run.sh file to run all the steps in the algorithm. This script runs all the scripts in the scripts folder one by one. ./run.sh 6. Serve Site \u00b6 Run 90x-serve-site.sh to serve the site ./scripts/90x-serve-site.sh 7. Deploy to Github Pages \u00b6 Run 99x-publish.sh to publish the site to the Github pages. Details regarding the script files \u00b6 S. No. Name Description Input Location Output Location 1 00x-setup-venv.sh This script creates the virtual environment and installs all dependencies. 2 01x-build-libs.sh Builds the dependent libraries, e.g: Kmeans. 3 02-check-requirements.sh Checks if all the dependencies are installed for the algorithm to run end to end. 4 03-clear-old-files.sh Deletes the old files located at $OUT/site-data/ $OUT /site-data/ 5 10-extract-layers.sh Extracts the beginning layers for the algorithm $NETWORK None 6 20-extract-forest.sh Takes the current and next layer to return the set of trees (forest) $LAYERS_DIR $FORESTS_DIR $ 7 21-layout-base-layer.sh Lays down the base layer of the graph $LAYERS_DIR /layer0.dot $LAYERS_DIR /layer0.dot 8 22-remove-crossings-first-layer.sh Removes the crossing if they are present in the first layer $LAYERS_DIR /layer0.dot None 9 23-impred.sh Run impred $LAYERS_DIR /layer0.dot $OUT /impred/layer0.dot 10 24-impred-remove-label-overlap.sh Impred to remove the label overlap $OUT /impred/layer0.dot $OUT /impred/layer0.dot 11 26-all-layers-except-first.sh Adding subcomponents and running impred on all layers except the first one 12 30-generate-clusters.sh Creates clusters for the completed layout $OUT /impred/layer7.dot $OUT /clustered/map.svg 13 40-convert-to-geojson.sh Converts to the geojson files $OUT /impred/layer7.dot $OUT /clustered 14 50-build-map-page.sh None $OUT /site-data/visualization 15 60-measure-quality.sh $OUT /impred/layer7.dot $OUT /quality_measurement/result.txt 16 90-generate-site.sh 17 90x-serve-site.sh 18 99x-publish.sh Environment Variables Details \u00b6 S. No. Name File Default Value 1 $OUT constants.sh raw-data/$DATASET/$VERSION 2 $LAYERS_DIR constants.sh $OUT/layers 3 $NETWORK config.sh datasets/sample/network.dot 4 $FORESTS_DIR constants.sh $OUT/forests Credits \u00b6 Developed as a collaboration between the Cyberinfrastructure for Network Science Center at Indiana University and University of Arizona License \u00b6 This project is licensed under the MIT License - see the LICENSE file for details","title":"About"},{"location":"index.html#map4sci","text":"Implementation of a graph algorithm that uses a multi level tree based approach for interactive graph visualization with semantic zoom (ZMLT). The research paper can be found here. This algorithm also uses Impred which is improved Pred algorithm and it can be found here.","title":"map4sci"},{"location":"index.html#change-log","text":"See Changelog","title":"Change Log"},{"location":"index.html#getting-started","text":"","title":"Getting Started"},{"location":"index.html#1-requirements","text":"python3 python3-dev java8-jdk make g++","title":"1. Requirements"},{"location":"index.html#2-setup-virtual-environment","text":"Run 00x-setup-venv.sh script to setup the virtual environment and install all the dependencies ./scripts/00x-setup-venv.sh To activate the virtual environment: source .venv/bin/activate For more information on the virtual environment refer to the python documentation .","title":"2. Setup virtual environment"},{"location":"index.html#3-building","text":"Build the libraries by running 01x-build-libs.sh script. ./scripts/01x-build-libs.sh","title":"3. Building"},{"location":"index.html#4-input","text":"Update the env.sh file to point to the data source config. The default data source is datasets/sample/config.sh The location of the input graph to the algorithm is path assigned to $NETWORK environment variable. This can be updated in config.sh file. The default value is: datasets/sample/network.dot This location can be changed by changing the value of $NETWORK environment variable in config.sh All the config.sh files should follow the format as given in config.example.sh","title":"4. Input"},{"location":"index.html#5-run","text":"Run run.sh file to run all the steps in the algorithm. This script runs all the scripts in the scripts folder one by one. ./run.sh","title":"5. Run"},{"location":"index.html#6-serve-site","text":"Run 90x-serve-site.sh to serve the site ./scripts/90x-serve-site.sh","title":"6. Serve Site"},{"location":"index.html#7-deploy-to-github-pages","text":"Run 99x-publish.sh to publish the site to the Github pages.","title":"7. Deploy to Github Pages"},{"location":"index.html#details-regarding-the-script-files","text":"S. No. Name Description Input Location Output Location 1 00x-setup-venv.sh This script creates the virtual environment and installs all dependencies. 2 01x-build-libs.sh Builds the dependent libraries, e.g: Kmeans. 3 02-check-requirements.sh Checks if all the dependencies are installed for the algorithm to run end to end. 4 03-clear-old-files.sh Deletes the old files located at $OUT/site-data/ $OUT /site-data/ 5 10-extract-layers.sh Extracts the beginning layers for the algorithm $NETWORK None 6 20-extract-forest.sh Takes the current and next layer to return the set of trees (forest) $LAYERS_DIR $FORESTS_DIR $ 7 21-layout-base-layer.sh Lays down the base layer of the graph $LAYERS_DIR /layer0.dot $LAYERS_DIR /layer0.dot 8 22-remove-crossings-first-layer.sh Removes the crossing if they are present in the first layer $LAYERS_DIR /layer0.dot None 9 23-impred.sh Run impred $LAYERS_DIR /layer0.dot $OUT /impred/layer0.dot 10 24-impred-remove-label-overlap.sh Impred to remove the label overlap $OUT /impred/layer0.dot $OUT /impred/layer0.dot 11 26-all-layers-except-first.sh Adding subcomponents and running impred on all layers except the first one 12 30-generate-clusters.sh Creates clusters for the completed layout $OUT /impred/layer7.dot $OUT /clustered/map.svg 13 40-convert-to-geojson.sh Converts to the geojson files $OUT /impred/layer7.dot $OUT /clustered 14 50-build-map-page.sh None $OUT /site-data/visualization 15 60-measure-quality.sh $OUT /impred/layer7.dot $OUT /quality_measurement/result.txt 16 90-generate-site.sh 17 90x-serve-site.sh 18 99x-publish.sh","title":"Details regarding the script files"},{"location":"index.html#environment-variables-details","text":"S. No. Name File Default Value 1 $OUT constants.sh raw-data/$DATASET/$VERSION 2 $LAYERS_DIR constants.sh $OUT/layers 3 $NETWORK config.sh datasets/sample/network.dot 4 $FORESTS_DIR constants.sh $OUT/forests","title":"Environment Variables Details"},{"location":"index.html#credits","text":"Developed as a collaboration between the Cyberinfrastructure for Network Science Center at Indiana University and University of Arizona","title":"Credits"},{"location":"index.html#license","text":"This project is licensed under the MIT License - see the LICENSE file for details","title":"License"},{"location":"CHANGELOG.html","text":"Changelog \u00b6 Changelog for map4sci. 0.2.0 - 2020-02-14 \u00b6 Added in 0.2.0 \u00b6 The whole ZMLT workflow has now been migrated with improvements A documentation site that bundles a generated visualization is created Known Issues in 0.2.0 \u00b6 ImPred still needs replaced The add_sub_component replacement still needs tested/improved 0.1.0 - 2020-01-24 \u00b6 Added in 0.1.0 \u00b6 First release, not quite functioning","title":"Change Log"},{"location":"CHANGELOG.html#changelog","text":"Changelog for map4sci.","title":"Changelog"},{"location":"CHANGELOG.html#020-2020-02-14","text":"","title":"0.2.0 - 2020-02-14"},{"location":"CHANGELOG.html#added-in-020","text":"The whole ZMLT workflow has now been migrated with improvements A documentation site that bundles a generated visualization is created","title":"Added in 0.2.0"},{"location":"CHANGELOG.html#known-issues-in-020","text":"ImPred still needs replaced The add_sub_component replacement still needs tested/improved","title":"Known Issues in 0.2.0"},{"location":"CHANGELOG.html#010-2020-01-24","text":"","title":"0.1.0 - 2020-01-24"},{"location":"CHANGELOG.html#added-in-010","text":"First release, not quite functioning","title":"Added in 0.1.0"},{"location":"API/src/","text":"src \u00b6","title":"src"},{"location":"API/src/#src","text":"","title":"src"},{"location":"API/src/add_sub_component/add_sub_component/","text":"src.add_sub_component.add_sub_component \u00b6 main \u00b6 main(graph_path, subgraph_path, output_path) Source: src/add_sub_component/add_sub_component.py","title":"add_sub_component"},{"location":"API/src/add_sub_component/add_sub_component/#srcadd_sub_componentadd_sub_component","text":"","title":"src.add_sub_component.add_sub_component"},{"location":"API/src/add_sub_component/add_sub_component/#main","text":"main(graph_path, subgraph_path, output_path) Source: src/add_sub_component/add_sub_component.py","title":"main"},{"location":"API/src/converters/","text":"src.converters \u00b6","title":"converters"},{"location":"API/src/converters/#srcconverters","text":"","title":"src.converters"},{"location":"API/src/converters/__main__/","text":"src.converters. main \u00b6 run_svg2geo \u00b6 run_svg2geo(args:argparse.Namespace) -> None Source: src/converters/__main__.py setup_cmdline \u00b6 setup_cmdline() -> argparse.ArgumentParser Source: src/converters/__main__.py","title":"__main__"},{"location":"API/src/converters/__main__/#srcconvertersmain","text":"","title":"src.converters.main"},{"location":"API/src/converters/__main__/#run_svg2geo","text":"run_svg2geo(args:argparse.Namespace) -> None Source: src/converters/__main__.py","title":"run_svg2geo"},{"location":"API/src/converters/__main__/#setup_cmdline","text":"setup_cmdline() -> argparse.ArgumentParser Source: src/converters/__main__.py","title":"setup_cmdline"},{"location":"API/src/converters/svg_to_geojson/","text":"src.converters.svg_to_geojson \u00b6 Class BoundingBox \u00b6 BoundingBox(minx:float, miny:float, maxx:float, maxy:float) Source: src/converters/svg_to_geojson.py Attributes \u00b6 maxx maxy minx miny Methods \u00b6 diff \u00b6 diff(self) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py maxx \u00b6 maxx Alias for field number 2 maxy \u00b6 maxy Alias for field number 3 minx \u00b6 minx Alias for field number 0 miny \u00b6 miny Alias for field number 1 Class MapPoint \u00b6 MapPoint(x:float, y:float) Source: src/converters/svg_to_geojson.py Attributes \u00b6 __geo_interface__ x y Methods \u00b6 geo_interface \u00b6 __geo_interface__ Source: src/converters/svg_to_geojson.py x \u00b6 x Alias for field number 0 y \u00b6 y Alias for field number 1 make_edge \u00b6 make_edge(graph:networkx.classes.graph.Graph, src:Any, dest:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py make_node \u00b6 make_node(graph:networkx.classes.graph.Graph, id:Any, x:float, y:float, config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py make_polygon \u00b6 make_polygon(graph:networkx.classes.graph.Graph, id:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py make_polyline \u00b6 make_polyline(graph:networkx.classes.graph.Graph, id:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py polygon_area \u00b6 polygon_area(points:List[Tuple[float, float]]) -> float Source: src/converters/svg_to_geojson.py Calculates the area of a polygon Parameters \u00b6 points : typing.List The list of vertices Returns \u00b6 float The area of the polygon process \u00b6 process(graph:networkx.classes.graph.Graph, tree:xml.etree.ElementTree.ElementTree, projected=True) -> Tuple[Any, Any, Any, Any] Source: src/converters/svg_to_geojson.py split_points \u00b6 split_points(points:str) -> List[Tuple[float, float]] Source: src/converters/svg_to_geojson.py to_lnglat \u00b6 to_lnglat(x:float, y:float) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py to_mercator \u00b6 to_mercator(x:float, y:float, bounds:src.converters.svg_to_geojson.BoundingBox) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py","title":"svg_to_geojson"},{"location":"API/src/converters/svg_to_geojson/#srcconverterssvg_to_geojson","text":"","title":"src.converters.svg_to_geojson"},{"location":"API/src/converters/svg_to_geojson/#class-boundingbox","text":"BoundingBox(minx:float, miny:float, maxx:float, maxy:float) Source: src/converters/svg_to_geojson.py","title":"Class BoundingBox"},{"location":"API/src/converters/svg_to_geojson/#attributes","text":"maxx maxy minx miny","title":"Attributes"},{"location":"API/src/converters/svg_to_geojson/#methods","text":"","title":"Methods"},{"location":"API/src/converters/svg_to_geojson/#diff","text":"diff(self) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py","title":"diff"},{"location":"API/src/converters/svg_to_geojson/#maxx","text":"maxx Alias for field number 2","title":"maxx"},{"location":"API/src/converters/svg_to_geojson/#maxy","text":"maxy Alias for field number 3","title":"maxy"},{"location":"API/src/converters/svg_to_geojson/#minx","text":"minx Alias for field number 0","title":"minx"},{"location":"API/src/converters/svg_to_geojson/#miny","text":"miny Alias for field number 1","title":"miny"},{"location":"API/src/converters/svg_to_geojson/#class-mappoint","text":"MapPoint(x:float, y:float) Source: src/converters/svg_to_geojson.py","title":"Class MapPoint"},{"location":"API/src/converters/svg_to_geojson/#attributes_1","text":"__geo_interface__ x y","title":"Attributes"},{"location":"API/src/converters/svg_to_geojson/#methods_1","text":"","title":"Methods"},{"location":"API/src/converters/svg_to_geojson/#geo_interface","text":"__geo_interface__ Source: src/converters/svg_to_geojson.py","title":"geo_interface"},{"location":"API/src/converters/svg_to_geojson/#x","text":"x Alias for field number 0","title":"x"},{"location":"API/src/converters/svg_to_geojson/#y","text":"y Alias for field number 1","title":"y"},{"location":"API/src/converters/svg_to_geojson/#make_edge","text":"make_edge(graph:networkx.classes.graph.Graph, src:Any, dest:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py","title":"make_edge"},{"location":"API/src/converters/svg_to_geojson/#make_node","text":"make_node(graph:networkx.classes.graph.Graph, id:Any, x:float, y:float, config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py","title":"make_node"},{"location":"API/src/converters/svg_to_geojson/#make_polygon","text":"make_polygon(graph:networkx.classes.graph.Graph, id:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py","title":"make_polygon"},{"location":"API/src/converters/svg_to_geojson/#make_polyline","text":"make_polyline(graph:networkx.classes.graph.Graph, id:Any, points:Iterable[Tuple[float, float]], config:dict, *, properties:dict=None) -> geojson.feature.Feature Source: src/converters/svg_to_geojson.py","title":"make_polyline"},{"location":"API/src/converters/svg_to_geojson/#polygon_area","text":"polygon_area(points:List[Tuple[float, float]]) -> float Source: src/converters/svg_to_geojson.py Calculates the area of a polygon","title":"polygon_area"},{"location":"API/src/converters/svg_to_geojson/#parameters","text":"points : typing.List The list of vertices","title":"Parameters"},{"location":"API/src/converters/svg_to_geojson/#returns","text":"float The area of the polygon","title":"Returns"},{"location":"API/src/converters/svg_to_geojson/#process","text":"process(graph:networkx.classes.graph.Graph, tree:xml.etree.ElementTree.ElementTree, projected=True) -> Tuple[Any, Any, Any, Any] Source: src/converters/svg_to_geojson.py","title":"process"},{"location":"API/src/converters/svg_to_geojson/#split_points","text":"split_points(points:str) -> List[Tuple[float, float]] Source: src/converters/svg_to_geojson.py","title":"split_points"},{"location":"API/src/converters/svg_to_geojson/#to_lnglat","text":"to_lnglat(x:float, y:float) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py","title":"to_lnglat"},{"location":"API/src/converters/svg_to_geojson/#to_mercator","text":"to_mercator(x:float, y:float, bounds:src.converters.svg_to_geojson.BoundingBox) -> Tuple[float, float] Source: src/converters/svg_to_geojson.py","title":"to_mercator"},{"location":"API/src/crossings/remove_crossings/","text":"src.crossings.remove_crossings \u00b6 remove_crossings \u00b6 remove_crossings(graph:networkx.classes.graph.Graph) -> None Source: src/crossings/remove_crossings.py Removes the crossings for the given graph Parameters \u00b6 graph : networkx.classes.graph.Graph The given graph","title":"remove_crossings"},{"location":"API/src/crossings/remove_crossings/#srccrossingsremove_crossings","text":"","title":"src.crossings.remove_crossings"},{"location":"API/src/crossings/remove_crossings/#remove_crossings","text":"remove_crossings(graph:networkx.classes.graph.Graph) -> None Source: src/crossings/remove_crossings.py Removes the crossings for the given graph","title":"remove_crossings"},{"location":"API/src/crossings/remove_crossings/#parameters","text":"graph : networkx.classes.graph.Graph The given graph","title":"Parameters"},{"location":"API/src/forests/","text":"src.forests \u00b6","title":"forests"},{"location":"API/src/forests/#srcforests","text":"","title":"src.forests"},{"location":"API/src/forests/__main__/","text":"src.forests. main \u00b6 run \u00b6 run(args:argparse.Namespace) -> None Source: src/forests/__main__.py Run extract forest Parameters \u00b6 args : argparse.Namespace Object holding the command line arguments setup_cmdline \u00b6 setup_cmdline() -> argparse.ArgumentParser Source: src/forests/__main__.py Sets up the commandline arguments for the forest extractor Returns \u00b6 argparse.ArgumentParser Returns the arguments as single object","title":"__main__"},{"location":"API/src/forests/__main__/#srcforestsmain","text":"","title":"src.forests.main"},{"location":"API/src/forests/__main__/#run","text":"run(args:argparse.Namespace) -> None Source: src/forests/__main__.py Run extract forest","title":"run"},{"location":"API/src/forests/__main__/#parameters","text":"args : argparse.Namespace Object holding the command line arguments","title":"Parameters"},{"location":"API/src/forests/__main__/#setup_cmdline","text":"setup_cmdline() -> argparse.ArgumentParser Source: src/forests/__main__.py Sets up the commandline arguments for the forest extractor","title":"setup_cmdline"},{"location":"API/src/forests/__main__/#returns","text":"argparse.ArgumentParser Returns the arguments as single object","title":"Returns"},{"location":"API/src/forests/extract/","text":"src.forests.extract \u00b6 get_forest \u00b6 get_forest(layer:networkx.classes.graph.Graph, sublayer:networkx.classes.graph.Graph) -> networkx.classes.graph.Graph Source: src/forests/extract.py Creates a forest from a tree where all nodes and edges from a subtree have been removed except those that have connections outside the subtree. Parameters \u00b6 layer : networkx.classes.graph.Graph Tree to turn into a forest. sublayer : networkx.classes.graph.Graph Subtree that should be subtracted from the forest. Returns \u00b6 networkx.classes.graph.Graph Forest without the subtree nodes and edges.","title":"extract"},{"location":"API/src/forests/extract/#srcforestsextract","text":"","title":"src.forests.extract"},{"location":"API/src/forests/extract/#get_forest","text":"get_forest(layer:networkx.classes.graph.Graph, sublayer:networkx.classes.graph.Graph) -> networkx.classes.graph.Graph Source: src/forests/extract.py Creates a forest from a tree where all nodes and edges from a subtree have been removed except those that have connections outside the subtree.","title":"get_forest"},{"location":"API/src/forests/extract/#parameters","text":"layer : networkx.classes.graph.Graph Tree to turn into a forest. sublayer : networkx.classes.graph.Graph Subtree that should be subtracted from the forest.","title":"Parameters"},{"location":"API/src/forests/extract/#returns","text":"networkx.classes.graph.Graph Forest without the subtree nodes and edges.","title":"Returns"},{"location":"API/src/graph/","text":"src.graph \u00b6","title":"graph"},{"location":"API/src/graph/#srcgraph","text":"","title":"src.graph"},{"location":"API/src/graph/crossings/","text":"src.graph.crossings \u00b6 count_crossings \u00b6 count_crossings(G, edges_to_compare=None) Source: src/graph/crossings.py count_crossings_single_graph \u00b6 count_crossings_single_graph(graph:networkx.classes.graph.Graph) -> List[Tuple[int, int]] Source: src/graph/crossings.py Returns the edges that have crossing in the graph. Parameters \u00b6 graph : networkx.classes.graph.Graph The given graph Returns \u00b6 typing.List The tuple of edge vertices that have crossings in the graph.","title":"crossings"},{"location":"API/src/graph/crossings/#srcgraphcrossings","text":"","title":"src.graph.crossings"},{"location":"API/src/graph/crossings/#count_crossings","text":"count_crossings(G, edges_to_compare=None) Source: src/graph/crossings.py","title":"count_crossings"},{"location":"API/src/graph/crossings/#count_crossings_single_graph","text":"count_crossings_single_graph(graph:networkx.classes.graph.Graph) -> List[Tuple[int, int]] Source: src/graph/crossings.py Returns the edges that have crossing in the graph.","title":"count_crossings_single_graph"},{"location":"API/src/graph/crossings/#parameters","text":"graph : networkx.classes.graph.Graph The given graph","title":"Parameters"},{"location":"API/src/graph/crossings/#returns","text":"typing.List The tuple of edge vertices that have crossings in the graph.","title":"Returns"},{"location":"API/src/graph/edge/","text":"src.graph.edge \u00b6 areEdgesAdjacent \u00b6 areEdgesAdjacent(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Determined if one of the coordiate out of given two edges (p1,q1) and (p2,q2) is same Parameters \u00b6 p1x : float x-coordinate of the first vertex of (p1,q1) edge p1y : float y-coordinate of the first vertex of (p1,q1) edge q1x : float x-coordinate of the second vertex of (p1,q1) edge q1y : float y-coordinate of the second vertex of (p1,q1) edge p2x : float x-coordinate of the first vertex of (p2,q2) edge p2y : float y-coordinate of the first vertex of (p2,q2) edge q2x : float x-coordinate of the first vertex of (p2,q2) edge q2y : float y-coordinate of the first vertex of (p2,q2) edge Returns \u00b6 bool True if one of the vertex of two edges (p1,q1) and (p2,q2) are same. avg_length \u00b6 avg_length(G:networkx.classes.graph.Graph) -> float Source: src/graph/edge.py Returns the average lenght for all the edges of the graph Parameters \u00b6 G : networkx.classes.graph.Graph Graph for which you want to find the average lenght of edges Returns \u00b6 float The average lenght of all edges of the given graph doIntersect \u00b6 doIntersect(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Checks if the line segments (p1, q1) and (p2, q2) intersect Parameters \u00b6 p1x : float x-coordinate of p1 point p1y : float y-coordinate of p1 point q1x : float x-coordinate of q1 point q1y : float y-coordinate of q1 point p2x : float x-coordinate of p2 point p2y : float y-coordinate of p2 point q2x : float x-coordinate of q1 point q2y : float y-coordinate of q2 point Returns \u00b6 bool True if the line segments (p1, q1) and (p2, q2) intersect do_segments_intersect \u00b6 do_segments_intersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/graph/edge.py get_orientation \u00b6 get_orientation(px, py, qx, qy, rx, ry) Source: src/graph/edge.py isEndPoint \u00b6 isEndPoint(ux:float, uy:float, vx:float, vy:float, px:float, py:float) -> bool Source: src/graph/edge.py Give three vertices u, v, p, checks if there exist any one pair out of the given three which are the same coordinates Example: if u and v coordinates have the same values then this function will return True Parameters \u00b6 ux : float x-coordinate of the first vertex uy : float y-coordinate of the first vertex vx : float x-coordinate of the second vertex vy : float y-coordinate of the second vertex px : float x-coordinate of the third vertex py : float y-coordinate of the third vertex Returns \u00b6 bool Returns True if any one pair out of given three vertex are same isSameCoord \u00b6 isSameCoord(x1:float, y1:float, x2:float, y2:float) -> bool Source: src/graph/edge.py Checks if the given coordinates are equal or not Parameters \u00b6 x1 : float x-coordinate of the first vertex y1 : float y-coordinate of the second vertex x2 : float x-coordinate of the second vertex y2 : float y-coordiante of the second vertex Returns \u00b6 bool Returns True is the coordinates are equal is_colinear \u00b6 is_colinear(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Determines if the two edges (p1,q1) and (p2,q2) are colinear Parameters \u00b6 p1x : float x-coordinate of the p1 vertex in edge (p1,q1) p1y : float y-coordinate of the p1 vertex in edge (p1,q1) q1x : float x-coordinate of the q1 vertex in edge (p1,q1) q1y : float y-coordinate of the q1 vertex in edge (p1,q1) p2x : float x-coordinate of the p2 vertex in edge (p2,q2) p2y : float y-coordinate of the p2 vertex in edge (p2,q2) q2x : float y-coordinate of the q2 vertex in edge (p2,q2) q2y : float y-coordinate of the q2 vertex in edge (p2,q2) Returns \u00b6 bool True if the two edges (p1,q1) and (p2,q2) are colinear is_on_segment \u00b6 is_on_segment(px, py, qx, qy, rx, ry) Source: src/graph/edge.py is_strictly_on_segment \u00b6 is_strictly_on_segment(px, py, qx, qy, rx, ry) Source: src/graph/edge.py zero_length_edges \u00b6 zero_length_edges(graph:networkx.classes.graph.Graph) Source: src/graph/edge.py Yields all zero-length edges Parameters \u00b6 graph : networkx.classes.graph.Graph The given graph","title":"edge"},{"location":"API/src/graph/edge/#srcgraphedge","text":"","title":"src.graph.edge"},{"location":"API/src/graph/edge/#areedgesadjacent","text":"areEdgesAdjacent(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Determined if one of the coordiate out of given two edges (p1,q1) and (p2,q2) is same","title":"areEdgesAdjacent"},{"location":"API/src/graph/edge/#parameters","text":"p1x : float x-coordinate of the first vertex of (p1,q1) edge p1y : float y-coordinate of the first vertex of (p1,q1) edge q1x : float x-coordinate of the second vertex of (p1,q1) edge q1y : float y-coordinate of the second vertex of (p1,q1) edge p2x : float x-coordinate of the first vertex of (p2,q2) edge p2y : float y-coordinate of the first vertex of (p2,q2) edge q2x : float x-coordinate of the first vertex of (p2,q2) edge q2y : float y-coordinate of the first vertex of (p2,q2) edge","title":"Parameters"},{"location":"API/src/graph/edge/#returns","text":"bool True if one of the vertex of two edges (p1,q1) and (p2,q2) are same.","title":"Returns"},{"location":"API/src/graph/edge/#avg_length","text":"avg_length(G:networkx.classes.graph.Graph) -> float Source: src/graph/edge.py Returns the average lenght for all the edges of the graph","title":"avg_length"},{"location":"API/src/graph/edge/#parameters_1","text":"G : networkx.classes.graph.Graph Graph for which you want to find the average lenght of edges","title":"Parameters"},{"location":"API/src/graph/edge/#returns_1","text":"float The average lenght of all edges of the given graph","title":"Returns"},{"location":"API/src/graph/edge/#dointersect","text":"doIntersect(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Checks if the line segments (p1, q1) and (p2, q2) intersect","title":"doIntersect"},{"location":"API/src/graph/edge/#parameters_2","text":"p1x : float x-coordinate of p1 point p1y : float y-coordinate of p1 point q1x : float x-coordinate of q1 point q1y : float y-coordinate of q1 point p2x : float x-coordinate of p2 point p2y : float y-coordinate of p2 point q2x : float x-coordinate of q1 point q2y : float y-coordinate of q2 point","title":"Parameters"},{"location":"API/src/graph/edge/#returns_2","text":"bool True if the line segments (p1, q1) and (p2, q2) intersect","title":"Returns"},{"location":"API/src/graph/edge/#do_segments_intersect","text":"do_segments_intersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/graph/edge.py","title":"do_segments_intersect"},{"location":"API/src/graph/edge/#get_orientation","text":"get_orientation(px, py, qx, qy, rx, ry) Source: src/graph/edge.py","title":"get_orientation"},{"location":"API/src/graph/edge/#isendpoint","text":"isEndPoint(ux:float, uy:float, vx:float, vy:float, px:float, py:float) -> bool Source: src/graph/edge.py Give three vertices u, v, p, checks if there exist any one pair out of the given three which are the same coordinates Example: if u and v coordinates have the same values then this function will return True","title":"isEndPoint"},{"location":"API/src/graph/edge/#parameters_3","text":"ux : float x-coordinate of the first vertex uy : float y-coordinate of the first vertex vx : float x-coordinate of the second vertex vy : float y-coordinate of the second vertex px : float x-coordinate of the third vertex py : float y-coordinate of the third vertex","title":"Parameters"},{"location":"API/src/graph/edge/#returns_3","text":"bool Returns True if any one pair out of given three vertex are same","title":"Returns"},{"location":"API/src/graph/edge/#issamecoord","text":"isSameCoord(x1:float, y1:float, x2:float, y2:float) -> bool Source: src/graph/edge.py Checks if the given coordinates are equal or not","title":"isSameCoord"},{"location":"API/src/graph/edge/#parameters_4","text":"x1 : float x-coordinate of the first vertex y1 : float y-coordinate of the second vertex x2 : float x-coordinate of the second vertex y2 : float y-coordiante of the second vertex","title":"Parameters"},{"location":"API/src/graph/edge/#returns_4","text":"bool Returns True is the coordinates are equal","title":"Returns"},{"location":"API/src/graph/edge/#is_colinear","text":"is_colinear(p1x:float, p1y:float, q1x:float, q1y:float, p2x:float, p2y:float, q2x:float, q2y:float) -> bool Source: src/graph/edge.py Determines if the two edges (p1,q1) and (p2,q2) are colinear","title":"is_colinear"},{"location":"API/src/graph/edge/#parameters_5","text":"p1x : float x-coordinate of the p1 vertex in edge (p1,q1) p1y : float y-coordinate of the p1 vertex in edge (p1,q1) q1x : float x-coordinate of the q1 vertex in edge (p1,q1) q1y : float y-coordinate of the q1 vertex in edge (p1,q1) p2x : float x-coordinate of the p2 vertex in edge (p2,q2) p2y : float y-coordinate of the p2 vertex in edge (p2,q2) q2x : float y-coordinate of the q2 vertex in edge (p2,q2) q2y : float y-coordinate of the q2 vertex in edge (p2,q2)","title":"Parameters"},{"location":"API/src/graph/edge/#returns_5","text":"bool True if the two edges (p1,q1) and (p2,q2) are colinear","title":"Returns"},{"location":"API/src/graph/edge/#is_on_segment","text":"is_on_segment(px, py, qx, qy, rx, ry) Source: src/graph/edge.py","title":"is_on_segment"},{"location":"API/src/graph/edge/#is_strictly_on_segment","text":"is_strictly_on_segment(px, py, qx, qy, rx, ry) Source: src/graph/edge.py","title":"is_strictly_on_segment"},{"location":"API/src/graph/edge/#zero_length_edges","text":"zero_length_edges(graph:networkx.classes.graph.Graph) Source: src/graph/edge.py Yields all zero-length edges","title":"zero_length_edges"},{"location":"API/src/graph/edge/#parameters_6","text":"graph : networkx.classes.graph.Graph The given graph","title":"Parameters"},{"location":"API/src/graph/subcomponent/","text":"src.graph.subcomponent \u00b6 extract \u00b6 extract(graph:networkx.classes.graph.Graph, mainVertex, vertex) Source: src/graph/subcomponent.py","title":"subcomponent"},{"location":"API/src/graph/subcomponent/#srcgraphsubcomponent","text":"","title":"src.graph.subcomponent"},{"location":"API/src/graph/subcomponent/#extract","text":"extract(graph:networkx.classes.graph.Graph, mainVertex, vertex) Source: src/graph/subcomponent.py","title":"extract"},{"location":"API/src/graph/vertex/","text":"src.graph.vertex \u00b6 get_Angle \u00b6 get_Angle(x1:float, y1:float, x2:float, y2:float) -> float Source: src/graph/vertex.py Gets the angle between the lines formed by the two points Parameters \u00b6 x1 : float x-coordinate of the first point y1 : float y-coordinate of the first point x2 : float x-coordinate of the second point y2 : float y-coordinate of the second point Returns \u00b6 float The angle formed by the lines get_coordinate \u00b6 get_coordinate(vertex) -> Tuple[float, float] Source: src/graph/vertex.py Get the x, y coordinates for the given vertex Parameters \u00b6 vertex : Vertex for which you need the coordinates Returns \u00b6 typing.Tuple Returns the x, y coordinates of the given vertex get_sectors_angle \u00b6 get_sectors_angle(graph:networkx.classes.graph.Graph, commonVertex) -> float Source: src/graph/vertex.py monotone_draw \u00b6 monotone_draw(graph, root, edge_length) Source: src/graph/vertex.py take tree assign unique slope use tan-1 for slopes if path, may consider same slop run DFS set_coordinate \u00b6 set_coordinate(vertex, x:float, y:float) -> None Source: src/graph/vertex.py Sets the coordinates for the given vertex Parameters \u00b6 vertex : The vertex for which coordinates should be changed x : float y : float shift_vertex \u00b6 shift_vertex(vertex, dx:float, dy:float) -> None Source: src/graph/vertex.py Shifts the vertex Parameters \u00b6 vertex : Vertex that you want to shift dx : float dy : float","title":"vertex"},{"location":"API/src/graph/vertex/#srcgraphvertex","text":"","title":"src.graph.vertex"},{"location":"API/src/graph/vertex/#get_angle","text":"get_Angle(x1:float, y1:float, x2:float, y2:float) -> float Source: src/graph/vertex.py Gets the angle between the lines formed by the two points","title":"get_Angle"},{"location":"API/src/graph/vertex/#parameters","text":"x1 : float x-coordinate of the first point y1 : float y-coordinate of the first point x2 : float x-coordinate of the second point y2 : float y-coordinate of the second point","title":"Parameters"},{"location":"API/src/graph/vertex/#returns","text":"float The angle formed by the lines","title":"Returns"},{"location":"API/src/graph/vertex/#get_coordinate","text":"get_coordinate(vertex) -> Tuple[float, float] Source: src/graph/vertex.py Get the x, y coordinates for the given vertex","title":"get_coordinate"},{"location":"API/src/graph/vertex/#parameters_1","text":"vertex : Vertex for which you need the coordinates","title":"Parameters"},{"location":"API/src/graph/vertex/#returns_1","text":"typing.Tuple Returns the x, y coordinates of the given vertex","title":"Returns"},{"location":"API/src/graph/vertex/#get_sectors_angle","text":"get_sectors_angle(graph:networkx.classes.graph.Graph, commonVertex) -> float Source: src/graph/vertex.py","title":"get_sectors_angle"},{"location":"API/src/graph/vertex/#monotone_draw","text":"monotone_draw(graph, root, edge_length) Source: src/graph/vertex.py take tree assign unique slope use tan-1 for slopes if path, may consider same slop run DFS","title":"monotone_draw"},{"location":"API/src/graph/vertex/#set_coordinate","text":"set_coordinate(vertex, x:float, y:float) -> None Source: src/graph/vertex.py Sets the coordinates for the given vertex","title":"set_coordinate"},{"location":"API/src/graph/vertex/#parameters_2","text":"vertex : The vertex for which coordinates should be changed x : float y : float","title":"Parameters"},{"location":"API/src/graph/vertex/#shift_vertex","text":"shift_vertex(vertex, dx:float, dy:float) -> None Source: src/graph/vertex.py Shifts the vertex","title":"shift_vertex"},{"location":"API/src/graph/vertex/#parameters_3","text":"vertex : Vertex that you want to shift dx : float dy : float","title":"Parameters"},{"location":"API/src/layers/","text":"src.layers \u00b6","title":"layers"},{"location":"API/src/layers/#srclayers","text":"","title":"src.layers"},{"location":"API/src/layers/__main__/","text":"src.layers. main \u00b6 correct_weight_type \u00b6 correct_weight_type(graph:networkx.classes.graph.Graph, weight:Union[str, Tuple[str, str]]) -> None Source: src/layers/__main__.py Converts weight values into floats. PyGraphviz and consequently networkx loads attributes as strings so values have to be cast/converted before use for correct results. Parameters \u00b6 graph : networkx.classes.graph.Graph Graph of values. weight : typing.Union[str, typing.Tuple[str, str]] Node attribute containing the weight values. run \u00b6 run(args:argparse.Namespace) -> None Source: src/layers/__main__.py Runs the extract.get_layers algorithm on the provided data. Parameters \u00b6 args : argparse.Namespace Arguments for the run. setup_cmdline \u00b6 setup_cmdline() -> argparse.ArgumentParser Source: src/layers/__main__.py Setup command line argument parser. Returns \u00b6 argparse.ArgumentParser A fully populated parser.","title":"__main__"},{"location":"API/src/layers/__main__/#srclayersmain","text":"","title":"src.layers.main"},{"location":"API/src/layers/__main__/#correct_weight_type","text":"correct_weight_type(graph:networkx.classes.graph.Graph, weight:Union[str, Tuple[str, str]]) -> None Source: src/layers/__main__.py Converts weight values into floats. PyGraphviz and consequently networkx loads attributes as strings so values have to be cast/converted before use for correct results.","title":"correct_weight_type"},{"location":"API/src/layers/__main__/#parameters","text":"graph : networkx.classes.graph.Graph Graph of values. weight : typing.Union[str, typing.Tuple[str, str]] Node attribute containing the weight values.","title":"Parameters"},{"location":"API/src/layers/__main__/#run","text":"run(args:argparse.Namespace) -> None Source: src/layers/__main__.py Runs the extract.get_layers algorithm on the provided data.","title":"run"},{"location":"API/src/layers/__main__/#parameters_1","text":"args : argparse.Namespace Arguments for the run.","title":"Parameters"},{"location":"API/src/layers/__main__/#setup_cmdline","text":"setup_cmdline() -> argparse.ArgumentParser Source: src/layers/__main__.py Setup command line argument parser.","title":"setup_cmdline"},{"location":"API/src/layers/__main__/#returns","text":"argparse.ArgumentParser A fully populated parser.","title":"Returns"},{"location":"API/src/layers/extract/","text":"src.layers.extract \u00b6 get_layers \u00b6 get_layers(graph:networkx.classes.graph.Graph, fractions:Iterable[float], maximum=True, weight:Union[str, Tuple[str, str]]='weight', algorithm='prim') -> Iterator[networkx.classes.graph.Graph] Source: src/layers/extract.py Extracts multiple layers from a graph. Parameters \u00b6 graph : networkx.classes.graph.Graph The base graph. fractions : typing.Iterable Percentage of nodes in each layer. maximum Whether to use a maximum spanning tree. weight : typing.Union[str, typing.Tuple[str, str]] , default weight Key for the weight attribute. algorithm Algorithm used to find spanning tree. Returns \u00b6 typing.Iterator","title":"extract"},{"location":"API/src/layers/extract/#srclayersextract","text":"","title":"src.layers.extract"},{"location":"API/src/layers/extract/#get_layers","text":"get_layers(graph:networkx.classes.graph.Graph, fractions:Iterable[float], maximum=True, weight:Union[str, Tuple[str, str]]='weight', algorithm='prim') -> Iterator[networkx.classes.graph.Graph] Source: src/layers/extract.py Extracts multiple layers from a graph.","title":"get_layers"},{"location":"API/src/layers/extract/#parameters","text":"graph : networkx.classes.graph.Graph The base graph. fractions : typing.Iterable Percentage of nodes in each layer. maximum Whether to use a maximum spanning tree. weight : typing.Union[str, typing.Tuple[str, str]] , default weight Key for the weight attribute. algorithm Algorithm used to find spanning tree.","title":"Parameters"},{"location":"API/src/layers/extract/#returns","text":"typing.Iterator","title":"Returns"},{"location":"API/src/layers/tree_util/","text":"src.layers.tree_util \u00b6 parents \u00b6 parents(node:<function NewType.<locals>.new_type at 0x7feeaf483a60>, predecessors:Mapping[Node, Node]) -> Iterator[Node] Source: src/layers/tree_util.py Iterate over a node's parents up to root. Parameters \u00b6 node : typing.Node Start node (not included in output). predecessors : typing.Mapping A mapping of node to parent node. Returns \u00b6 typing.Iterator sorted_nodes \u00b6 sorted_nodes(graph:networkx.classes.graph.Graph, attribute='weight', reverse=False) -> List[Node] Source: src/layers/tree_util.py Sorts nodes in a graph Parameters \u00b6 graph : networkx.classes.graph.Graph The graph whose nodes to sort. attribute : optional , str Node attribute to sort on, by default 'weight' reverse : optional , bool Whether the result order should be reversed, by default False Returns \u00b6 typing.List A list of the sorted node ids. spanning_tree \u00b6 spanning_tree(graph:networkx.classes.graph.Graph, maximum=True, weight='weight', algorithm='prim') -> networkx.classes.graph.Graph Source: src/layers/tree_util.py Computes the [minimum/maximum] spanning tree for a graph. Parameters \u00b6 graph : networkx.classes.graph.Graph Graph to compute spanning tree for. maximum : optional , bool Whether the tree is maximum spanning, by default True weight : optional , str Edge attribute of weights, by default 'weight' algorithm : optional , str Algorithm used to compute the spanning tree, by default 'prim' Returns \u00b6 networkx.classes.graph.Graph Subgraph representing the spanning tree. subtree \u00b6 subtree(graph:networkx.classes.graph.Graph, nodes:Iterable[Node], predecessors:Mapping[Node, Node]=None) -> networkx.classes.graph.Graph Source: src/layers/tree_util.py Extract a subtree with the specified nodes. Parameters \u00b6 graph : networkx.classes.graph.Graph Full tree graph. nodes : typing.Iterable Nodes to include. predecessors : typing.Mapping , default None Mapping of node to parent node, by default None Returns \u00b6 networkx.classes.graph.Graph A proper tree containing at least the specified nodes.","title":"tree_util"},{"location":"API/src/layers/tree_util/#srclayerstree_util","text":"","title":"src.layers.tree_util"},{"location":"API/src/layers/tree_util/#parents","text":"parents(node:<function NewType.<locals>.new_type at 0x7feeaf483a60>, predecessors:Mapping[Node, Node]) -> Iterator[Node] Source: src/layers/tree_util.py Iterate over a node's parents up to root.","title":"parents"},{"location":"API/src/layers/tree_util/#parameters","text":"node : typing.Node Start node (not included in output). predecessors : typing.Mapping A mapping of node to parent node.","title":"Parameters"},{"location":"API/src/layers/tree_util/#returns","text":"typing.Iterator","title":"Returns"},{"location":"API/src/layers/tree_util/#sorted_nodes","text":"sorted_nodes(graph:networkx.classes.graph.Graph, attribute='weight', reverse=False) -> List[Node] Source: src/layers/tree_util.py Sorts nodes in a graph","title":"sorted_nodes"},{"location":"API/src/layers/tree_util/#parameters_1","text":"graph : networkx.classes.graph.Graph The graph whose nodes to sort. attribute : optional , str Node attribute to sort on, by default 'weight' reverse : optional , bool Whether the result order should be reversed, by default False","title":"Parameters"},{"location":"API/src/layers/tree_util/#returns_1","text":"typing.List A list of the sorted node ids.","title":"Returns"},{"location":"API/src/layers/tree_util/#spanning_tree","text":"spanning_tree(graph:networkx.classes.graph.Graph, maximum=True, weight='weight', algorithm='prim') -> networkx.classes.graph.Graph Source: src/layers/tree_util.py Computes the [minimum/maximum] spanning tree for a graph.","title":"spanning_tree"},{"location":"API/src/layers/tree_util/#parameters_2","text":"graph : networkx.classes.graph.Graph Graph to compute spanning tree for. maximum : optional , bool Whether the tree is maximum spanning, by default True weight : optional , str Edge attribute of weights, by default 'weight' algorithm : optional , str Algorithm used to compute the spanning tree, by default 'prim'","title":"Parameters"},{"location":"API/src/layers/tree_util/#returns_2","text":"networkx.classes.graph.Graph Subgraph representing the spanning tree.","title":"Returns"},{"location":"API/src/layers/tree_util/#subtree","text":"subtree(graph:networkx.classes.graph.Graph, nodes:Iterable[Node], predecessors:Mapping[Node, Node]=None) -> networkx.classes.graph.Graph Source: src/layers/tree_util.py Extract a subtree with the specified nodes.","title":"subtree"},{"location":"API/src/layers/tree_util/#parameters_3","text":"graph : networkx.classes.graph.Graph Full tree graph. nodes : typing.Iterable Nodes to include. predecessors : typing.Mapping , default None Mapping of node to parent node, by default None","title":"Parameters"},{"location":"API/src/layers/tree_util/#returns_3","text":"networkx.classes.graph.Graph A proper tree containing at least the specified nodes.","title":"Returns"},{"location":"API/src/mkdocs_macros/","text":"src.mkdocs_macros \u00b6 Class SubEnvironment \u00b6 SubEnvironment(name, parent) Source: src/mkdocs_macros/__init__.py Methods \u00b6 filter \u00b6 filter(self, func, name=None) Source: src/mkdocs_macros/__init__.py macro \u00b6 macro(self, func, name=None) Source: src/mkdocs_macros/__init__.py conf \u00b6 conf Source: src/mkdocs_macros/__init__.py filters \u00b6 filters Source: src/mkdocs_macros/__init__.py project_dir \u00b6 project_dir Source: src/mkdocs_macros/__init__.py define_env \u00b6 define_env(env) Source: src/mkdocs_macros/__init__.py","title":"mkdocs_macros"},{"location":"API/src/mkdocs_macros/#srcmkdocs_macros","text":"","title":"src.mkdocs_macros"},{"location":"API/src/mkdocs_macros/#class-subenvironment","text":"SubEnvironment(name, parent) Source: src/mkdocs_macros/__init__.py","title":"Class SubEnvironment"},{"location":"API/src/mkdocs_macros/#methods","text":"","title":"Methods"},{"location":"API/src/mkdocs_macros/#filter","text":"filter(self, func, name=None) Source: src/mkdocs_macros/__init__.py","title":"filter"},{"location":"API/src/mkdocs_macros/#macro","text":"macro(self, func, name=None) Source: src/mkdocs_macros/__init__.py","title":"macro"},{"location":"API/src/mkdocs_macros/#conf","text":"conf Source: src/mkdocs_macros/__init__.py","title":"conf"},{"location":"API/src/mkdocs_macros/#filters","text":"filters Source: src/mkdocs_macros/__init__.py","title":"filters"},{"location":"API/src/mkdocs_macros/#project_dir","text":"project_dir Source: src/mkdocs_macros/__init__.py","title":"project_dir"},{"location":"API/src/mkdocs_macros/#define_env","text":"define_env(env) Source: src/mkdocs_macros/__init__.py","title":"define_env"},{"location":"API/src/mkdocs_macros/back_compat/","text":"src.mkdocs_macros.back_compat \u00b6 declare_variables \u00b6 declare_variables(variables, macro) Source: src/mkdocs_macros/back_compat.py","title":"back_compat"},{"location":"API/src/mkdocs_macros/back_compat/#srcmkdocs_macrosback_compat","text":"","title":"src.mkdocs_macros.back_compat"},{"location":"API/src/mkdocs_macros/back_compat/#declare_variables","text":"declare_variables(variables, macro) Source: src/mkdocs_macros/back_compat.py","title":"declare_variables"},{"location":"API/src/mkdocs_macros/common/","text":"src.mkdocs_macros.common \u00b6 define_env \u00b6 define_env(env) Source: src/mkdocs_macros/common.py embed_code \u00b6 embed_code(path, type_=None) Source: src/mkdocs_macros/common.py embed_file \u00b6 embed_file(path) Source: src/mkdocs_macros/common.py indent \u00b6 indent(text, indt=4) Source: src/mkdocs_macros/common.py interleave \u00b6 interleave(*iterables) Source: src/mkdocs_macros/common.py multiline \u00b6 multiline(*lines) Source: src/mkdocs_macros/common.py unique \u00b6 unique(prefix=\"\") Source: src/mkdocs_macros/common.py","title":"common"},{"location":"API/src/mkdocs_macros/common/#srcmkdocs_macroscommon","text":"","title":"src.mkdocs_macros.common"},{"location":"API/src/mkdocs_macros/common/#define_env","text":"define_env(env) Source: src/mkdocs_macros/common.py","title":"define_env"},{"location":"API/src/mkdocs_macros/common/#embed_code","text":"embed_code(path, type_=None) Source: src/mkdocs_macros/common.py","title":"embed_code"},{"location":"API/src/mkdocs_macros/common/#embed_file","text":"embed_file(path) Source: src/mkdocs_macros/common.py","title":"embed_file"},{"location":"API/src/mkdocs_macros/common/#indent","text":"indent(text, indt=4) Source: src/mkdocs_macros/common.py","title":"indent"},{"location":"API/src/mkdocs_macros/common/#interleave","text":"interleave(*iterables) Source: src/mkdocs_macros/common.py","title":"interleave"},{"location":"API/src/mkdocs_macros/common/#multiline","text":"multiline(*lines) Source: src/mkdocs_macros/common.py","title":"multiline"},{"location":"API/src/mkdocs_macros/common/#unique","text":"unique(prefix=\"\") Source: src/mkdocs_macros/common.py","title":"unique"},{"location":"API/src/mkdocs_macros/javascript/","text":"src.mkdocs_macros.javascript \u00b6 Class Identifier \u00b6 Source: src/mkdocs_macros/javascript.py str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. Class Raw \u00b6 Source: src/mkdocs_macros/javascript.py str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'. define_env \u00b6 define_env(env) Source: src/mkdocs_macros/javascript.py embed \u00b6 embed(path, idnt=2) Source: src/mkdocs_macros/javascript.py end \u00b6 end() Source: src/mkdocs_macros/javascript.py include \u00b6 include(path) Source: src/mkdocs_macros/javascript.py start \u00b6 start() Source: src/mkdocs_macros/javascript.py to_js \u00b6 to_js(obj) Source: src/mkdocs_macros/javascript.py","title":"javascript"},{"location":"API/src/mkdocs_macros/javascript/#srcmkdocs_macrosjavascript","text":"","title":"src.mkdocs_macros.javascript"},{"location":"API/src/mkdocs_macros/javascript/#class-identifier","text":"Source: src/mkdocs_macros/javascript.py str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Class Identifier"},{"location":"API/src/mkdocs_macros/javascript/#class-raw","text":"Source: src/mkdocs_macros/javascript.py str(object='') -> str str(bytes_or_buffer[, encoding[, errors]]) -> str Create a new string object from the given object. If encoding or errors is specified, then the object must expose a data buffer that will be decoded using the given encoding and error handler. Otherwise, returns the result of object. str () (if defined) or repr(object). encoding defaults to sys.getdefaultencoding(). errors defaults to 'strict'.","title":"Class Raw"},{"location":"API/src/mkdocs_macros/javascript/#define_env","text":"define_env(env) Source: src/mkdocs_macros/javascript.py","title":"define_env"},{"location":"API/src/mkdocs_macros/javascript/#embed","text":"embed(path, idnt=2) Source: src/mkdocs_macros/javascript.py","title":"embed"},{"location":"API/src/mkdocs_macros/javascript/#end","text":"end() Source: src/mkdocs_macros/javascript.py","title":"end"},{"location":"API/src/mkdocs_macros/javascript/#include","text":"include(path) Source: src/mkdocs_macros/javascript.py","title":"include"},{"location":"API/src/mkdocs_macros/javascript/#start","text":"start() Source: src/mkdocs_macros/javascript.py","title":"start"},{"location":"API/src/mkdocs_macros/javascript/#to_js","text":"to_js(obj) Source: src/mkdocs_macros/javascript.py","title":"to_js"},{"location":"API/src/mkdocs_macros/vega/","text":"src.mkdocs_macros.vega \u00b6 create_vega_script \u00b6 create_vega_script(source, opts) Source: src/mkdocs_macros/vega.py define_env \u00b6 define_env(env) Source: src/mkdocs_macros/vega.py embed \u00b6 embed(path, opts=None) Source: src/mkdocs_macros/vega.py header \u00b6 header() Source: src/mkdocs_macros/vega.py include \u00b6 include(path, opts=None) Source: src/mkdocs_macros/vega.py options_to_javascript \u00b6 options_to_javascript(opts) Source: src/mkdocs_macros/vega.py","title":"vega"},{"location":"API/src/mkdocs_macros/vega/#srcmkdocs_macrosvega","text":"","title":"src.mkdocs_macros.vega"},{"location":"API/src/mkdocs_macros/vega/#create_vega_script","text":"create_vega_script(source, opts) Source: src/mkdocs_macros/vega.py","title":"create_vega_script"},{"location":"API/src/mkdocs_macros/vega/#define_env","text":"define_env(env) Source: src/mkdocs_macros/vega.py","title":"define_env"},{"location":"API/src/mkdocs_macros/vega/#embed","text":"embed(path, opts=None) Source: src/mkdocs_macros/vega.py","title":"embed"},{"location":"API/src/mkdocs_macros/vega/#header","text":"header() Source: src/mkdocs_macros/vega.py","title":"header"},{"location":"API/src/mkdocs_macros/vega/#include","text":"include(path, opts=None) Source: src/mkdocs_macros/vega.py","title":"include"},{"location":"API/src/mkdocs_macros/vega/#options_to_javascript","text":"options_to_javascript(opts) Source: src/mkdocs_macros/vega.py","title":"options_to_javascript"},{"location":"API/src/property_fetcher/","text":"src.property_fetcher \u00b6","title":"property_fetcher"},{"location":"API/src/property_fetcher/#srcproperty_fetcher","text":"","title":"src.property_fetcher"},{"location":"API/src/property_fetcher/__main__/","text":"src.property_fetcher. main \u00b6 copy_attributes \u00b6 copy_attributes(graph_path:str, tree_path:str) -> None Source: src/property_fetcher/__main__.py Copies the different attributes from the graph to the given tree Parameters \u00b6 graph_path : str Path to the given graph from where the attributes shoule be copied tree_path : str Path to the tree where the attributes should be written","title":"__main__"},{"location":"API/src/property_fetcher/__main__/#srcproperty_fetchermain","text":"","title":"src.property_fetcher.main"},{"location":"API/src/property_fetcher/__main__/#copy_attributes","text":"copy_attributes(graph_path:str, tree_path:str) -> None Source: src/property_fetcher/__main__.py Copies the different attributes from the graph to the given tree","title":"copy_attributes"},{"location":"API/src/property_fetcher/__main__/#parameters","text":"graph_path : str Path to the given graph from where the attributes shoule be copied tree_path : str Path to the tree where the attributes should be written","title":"Parameters"},{"location":"API/src/quality_measurement/","text":"src.quality_measurement \u00b6","title":"quality_measurement"},{"location":"API/src/quality_measurement/#srcquality_measurement","text":"","title":"src.quality_measurement"},{"location":"API/src/quality_measurement/__main__/","text":"src.quality_measurement. main \u00b6 run_original \u00b6 run_original(args:argparse.Namespace) -> None Source: src/quality_measurement/__main__.py Runs quality measurements using the original algorithms. Parameters \u00b6 args : argparse.Namespace Metrics configuration arguments. setup_cmdline \u00b6 setup_cmdline() -> argparse.ArgumentParser Source: src/quality_measurement/__main__.py Setup command line argument parser. Returns \u00b6 argparse.ArgumentParser Fully initialized argument parser.","title":"__main__"},{"location":"API/src/quality_measurement/__main__/#srcquality_measurementmain","text":"","title":"src.quality_measurement.main"},{"location":"API/src/quality_measurement/__main__/#run_original","text":"run_original(args:argparse.Namespace) -> None Source: src/quality_measurement/__main__.py Runs quality measurements using the original algorithms.","title":"run_original"},{"location":"API/src/quality_measurement/__main__/#parameters","text":"args : argparse.Namespace Metrics configuration arguments.","title":"Parameters"},{"location":"API/src/quality_measurement/__main__/#setup_cmdline","text":"setup_cmdline() -> argparse.ArgumentParser Source: src/quality_measurement/__main__.py Setup command line argument parser.","title":"setup_cmdline"},{"location":"API/src/quality_measurement/__main__/#returns","text":"argparse.ArgumentParser Fully initialized argument parser.","title":"Returns"},{"location":"API/src/quality_measurement/original/betametrics/continuity/","text":"src.quality_measurement.original.betametrics.continuity \u00b6 continuity \u00b6 continuity(G) Source: src/quality_measurement/original/betametrics/continuity.py is_highway_edge \u00b6 is_highway_edge(edge) Source: src/quality_measurement/original/betametrics/continuity.py","title":"continuity"},{"location":"API/src/quality_measurement/original/betametrics/continuity/#srcquality_measurementoriginalbetametricscontinuity","text":"","title":"src.quality_measurement.original.betametrics.continuity"},{"location":"API/src/quality_measurement/original/betametrics/continuity/#continuity","text":"continuity(G) Source: src/quality_measurement/original/betametrics/continuity.py","title":"continuity"},{"location":"API/src/quality_measurement/original/betametrics/continuity/#is_highway_edge","text":"is_highway_edge(edge) Source: src/quality_measurement/original/betametrics/continuity.py","title":"is_highway_edge"},{"location":"API/src/quality_measurement/original/betametrics/drawing_highwayness/","text":"src.quality_measurement.original.betametrics.drawing_highwayness \u00b6 boundingBox \u00b6 boundingBox(G, vertices=[]) Source: src/quality_measurement/original/betametrics/drawing_highwayness.py highwayDrawingCoverage \u00b6 highwayDrawingCoverage(GD) Source: src/quality_measurement/original/betametrics/drawing_highwayness.py","title":"drawing_highwayness"},{"location":"API/src/quality_measurement/original/betametrics/drawing_highwayness/#srcquality_measurementoriginalbetametricsdrawing_highwayness","text":"","title":"src.quality_measurement.original.betametrics.drawing_highwayness"},{"location":"API/src/quality_measurement/original/betametrics/drawing_highwayness/#boundingbox","text":"boundingBox(G, vertices=[]) Source: src/quality_measurement/original/betametrics/drawing_highwayness.py","title":"boundingBox"},{"location":"API/src/quality_measurement/original/betametrics/drawing_highwayness/#highwaydrawingcoverage","text":"highwayDrawingCoverage(GD) Source: src/quality_measurement/original/betametrics/drawing_highwayness.py","title":"highwayDrawingCoverage"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/","text":"src.quality_measurement.original.betametrics.smoothness \u00b6 compute_distance_on_graph \u00b6 compute_distance_on_graph(G, s_id, t_id) Source: src/quality_measurement/original/betametrics/smoothness.py Computes the sum of the length in the shortest path between s and t . If the shortest path are more than one the shorter in edge lengths is considered return a double value of the length of the shortestpath between s and t compute_euclidean_distance \u00b6 compute_euclidean_distance(s, t) Source: src/quality_measurement/original/betametrics/smoothness.py Computes the distance between the two points s and t . return distance between the given vertices compute_smoothness \u00b6 compute_smoothness(G) Source: src/quality_measurement/original/betametrics/smoothness.py Smoothness is the difference between the Euclidean Distance and the distance on the graph of any pair of leaves of the given Tree extract_leaves \u00b6 extract_leaves(G) Source: src/quality_measurement/original/betametrics/smoothness.py Extracts from G the vertices with degree 1, i.e. the leaves.","title":"smoothness"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/#srcquality_measurementoriginalbetametricssmoothness","text":"","title":"src.quality_measurement.original.betametrics.smoothness"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/#compute_distance_on_graph","text":"compute_distance_on_graph(G, s_id, t_id) Source: src/quality_measurement/original/betametrics/smoothness.py Computes the sum of the length in the shortest path between s and t . If the shortest path are more than one the shorter in edge lengths is considered return a double value of the length of the shortestpath between s and t","title":"compute_distance_on_graph"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/#compute_euclidean_distance","text":"compute_euclidean_distance(s, t) Source: src/quality_measurement/original/betametrics/smoothness.py Computes the distance between the two points s and t . return distance between the given vertices","title":"compute_euclidean_distance"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/#compute_smoothness","text":"compute_smoothness(G) Source: src/quality_measurement/original/betametrics/smoothness.py Smoothness is the difference between the Euclidean Distance and the distance on the graph of any pair of leaves of the given Tree","title":"compute_smoothness"},{"location":"API/src/quality_measurement/original/betametrics/smoothness/#extract_leaves","text":"extract_leaves(G) Source: src/quality_measurement/original/betametrics/smoothness.py Extracts from G the vertices with degree 1, i.e. the leaves.","title":"extract_leaves"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/","text":"src.quality_measurement.original.betametrics.speed_on_network \u00b6 add_speed_attribute \u00b6 add_speed_attribute(GD) Source: src/quality_measurement/original/betametrics/speed_on_network.py compute_path_length \u00b6 compute_path_length(GD, path) Source: src/quality_measurement/original/betametrics/speed_on_network.py compute_path_travel_time \u00b6 compute_path_travel_time(GD, path) Source: src/quality_measurement/original/betametrics/speed_on_network.py highwayness \u00b6 highwayness(GD) Source: src/quality_measurement/original/betametrics/speed_on_network.py highwayness_multilevel_ratio \u00b6 highwayness_multilevel_ratio(GD_prev, GD_curr) Source: src/quality_measurement/original/betametrics/speed_on_network.py is_highway_edge \u00b6 is_highway_edge(edge) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"speed_on_network"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#srcquality_measurementoriginalbetametricsspeed_on_network","text":"","title":"src.quality_measurement.original.betametrics.speed_on_network"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#add_speed_attribute","text":"add_speed_attribute(GD) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"add_speed_attribute"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#compute_path_length","text":"compute_path_length(GD, path) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"compute_path_length"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#compute_path_travel_time","text":"compute_path_travel_time(GD, path) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"compute_path_travel_time"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#highwayness","text":"highwayness(GD) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"highwayness"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#highwayness_multilevel_ratio","text":"highwayness_multilevel_ratio(GD_prev, GD_curr) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"highwayness_multilevel_ratio"},{"location":"API/src/quality_measurement/original/betametrics/speed_on_network/#is_highway_edge","text":"is_highway_edge(edge) Source: src/quality_measurement/original/betametrics/speed_on_network.py","title":"is_highway_edge"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/","text":"src.quality_measurement.original.betametrics.vertexangularresolution \u00b6 compute \u00b6 compute(G) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py computeSectorsAngles \u00b6 computeSectorsAngles(G, centralVertex) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py getAngleOfLineBetweenTwoPoints \u00b6 getAngleOfLineBetweenTwoPoints(point1X, point1Y, point2X, point2Y) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py getCoordinate \u00b6 getCoordinate(vertex) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py setCoordinate \u00b6 setCoordinate(vertex, x, y) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py shiftVertex \u00b6 shiftVertex(vertex, dx, dy) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py translateGraph \u00b6 translateGraph(G, translation_dx, translation_dy) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"vertexangularresolution"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#srcquality_measurementoriginalbetametricsvertexangularresolution","text":"","title":"src.quality_measurement.original.betametrics.vertexangularresolution"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#compute","text":"compute(G) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"compute"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#computesectorsangles","text":"computeSectorsAngles(G, centralVertex) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"computeSectorsAngles"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#getangleoflinebetweentwopoints","text":"getAngleOfLineBetweenTwoPoints(point1X, point1Y, point2X, point2Y) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"getAngleOfLineBetweenTwoPoints"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#getcoordinate","text":"getCoordinate(vertex) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"getCoordinate"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#setcoordinate","text":"setCoordinate(vertex, x, y) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"setCoordinate"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#shiftvertex","text":"shiftVertex(vertex, dx, dy) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"shiftVertex"},{"location":"API/src/quality_measurement/original/betametrics/vertexangularresolution/#translategraph","text":"translateGraph(G, translation_dx, translation_dy) Source: src/quality_measurement/original/betametrics/vertexangularresolution.py","title":"translateGraph"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/","text":"src.quality_measurement.original.betametrics.zigzagness \u00b6 angleBetweenTwoPointsWithFixedPoint \u00b6 angleBetweenTwoPointsWithFixedPoint( point1X, point1Y, point2X, point2Y, fixedX, fixedY ) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the angle between two lines defined by three points. compute_angle_penalty_continuous \u00b6 compute_angle_penalty_continuous(prev_angle, curr_angle, prev_diff) Source: src/quality_measurement/original/betametrics/zigzagness.py compute_angle_penalty_discrete \u00b6 compute_angle_penalty_discrete(prev_angle, curr_angle, prev_diff) Source: src/quality_measurement/original/betametrics/zigzagness.py compute_zigzagness \u00b6 compute_zigzagness(G) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the zigzagness of the given tree. compute_zigzagness_angle \u00b6 compute_zigzagness_angle(GD) Source: src/quality_measurement/original/betametrics/zigzagness.py slopeBetweenPoints \u00b6 slopeBetweenPoints(point1X, point1Y, point2X, point2Y) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the slope between two points.","title":"zigzagness"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#srcquality_measurementoriginalbetametricszigzagness","text":"","title":"src.quality_measurement.original.betametrics.zigzagness"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#anglebetweentwopointswithfixedpoint","text":"angleBetweenTwoPointsWithFixedPoint( point1X, point1Y, point2X, point2Y, fixedX, fixedY ) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the angle between two lines defined by three points.","title":"angleBetweenTwoPointsWithFixedPoint"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#compute_angle_penalty_continuous","text":"compute_angle_penalty_continuous(prev_angle, curr_angle, prev_diff) Source: src/quality_measurement/original/betametrics/zigzagness.py","title":"compute_angle_penalty_continuous"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#compute_angle_penalty_discrete","text":"compute_angle_penalty_discrete(prev_angle, curr_angle, prev_diff) Source: src/quality_measurement/original/betametrics/zigzagness.py","title":"compute_angle_penalty_discrete"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#compute_zigzagness","text":"compute_zigzagness(G) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the zigzagness of the given tree.","title":"compute_zigzagness"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#compute_zigzagness_angle","text":"compute_zigzagness_angle(GD) Source: src/quality_measurement/original/betametrics/zigzagness.py","title":"compute_zigzagness_angle"},{"location":"API/src/quality_measurement/original/betametrics/zigzagness/#slopebetweenpoints","text":"slopeBetweenPoints(point1X, point1Y, point2X, point2Y) Source: src/quality_measurement/original/betametrics/zigzagness.py Computes the slope between two points.","title":"slopeBetweenPoints"},{"location":"API/src/quality_measurement/original/crossings/","text":"src.quality_measurement.original.crossings \u00b6 areEdgesAdjacent \u00b6 areEdgesAdjacent(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py check_point_in_rectangle \u00b6 check_point_in_rectangle(x1, y1, x2, y2, x3, y3, x4, y4, x, y) Source: src/quality_measurement/original/crossings.py A function to check whether point P(x, y) lies inside the rectangle formed by A(x1, y1), B(x2, y2), C(x3, y3) and D(x4, y4) compute_intersection_point \u00b6 compute_intersection_point(x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4) Source: src/quality_measurement/original/crossings.py Computes the intersection point Note that the intersection point is for the infinitely long lines defined by the points, and can produce an intersection point beyond the lengths of the line segments but here we know that there is an intersection, and it is unique. count_crossings \u00b6 count_crossings( G, edges_to_compare=None, stop_when_found=False, ignore_label_edge_cr=False ) Source: src/quality_measurement/original/crossings.py Counts the crossings of the given graph G< t>. The crossing count can be executed only on the given list of edges of G< t> passed as input in edges_to_compare< t>. Also the execution can stop as soon as a crossing is found if the boolean value stop_when_found< t> is set to True. If the vertices have labels with given height and width the crossings that occur below the labels can be ignored if the boolean value ignore_label_edge_cr< t> is set to True. Return a list of crossings where each element has the crossing edge and the intersection point. doIntersect \u00b6 doIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py doSegmentsIntersect \u00b6 doSegmentsIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py getAngleLineSeg \u00b6 getAngleLineSeg(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py getAngleLineSegDegree \u00b6 getAngleLineSegDegree(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py getIntersection \u00b6 getIntersection(x11, y11, x12, y12, x21, y21, x22, y22) Source: src/quality_measurement/original/crossings.py get_rectangle \u00b6 get_rectangle(p1x, p1y, w_1, h_1) Source: src/quality_measurement/original/crossings.py Return the corner coordinates of the rectangle centered in p1x p1y and with width w_1 and h_1 isColinear \u00b6 isColinear(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py isEndPoint \u00b6 isEndPoint(ux, uy, vx, vy, px, py) Source: src/quality_measurement/original/crossings.py isSameCoord \u00b6 isSameCoord(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py onSegment \u00b6 onSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py orientation \u00b6 orientation(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py remove_label_edge_crossings \u00b6 remove_label_edge_crossings(G, crossings_edges) Source: src/quality_measurement/original/crossings.py Removes from the given list the crossings between edges and labels Instead of starting from the vertex position, the edges start from the boundary of the labels. slope \u00b6 slope(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py strictlyOnSegment \u00b6 strictlyOnSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py to_deg \u00b6 to_deg(rad) Source: src/quality_measurement/original/crossings.py triangle_area \u00b6 triangle_area(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py A utility function to calculate area of triangle formed by (x1, y1), (x2, y2) and (x3, y3) yInt \u00b6 yInt(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py","title":"crossings"},{"location":"API/src/quality_measurement/original/crossings/#srcquality_measurementoriginalcrossings","text":"","title":"src.quality_measurement.original.crossings"},{"location":"API/src/quality_measurement/original/crossings/#areedgesadjacent","text":"areEdgesAdjacent(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py","title":"areEdgesAdjacent"},{"location":"API/src/quality_measurement/original/crossings/#check_point_in_rectangle","text":"check_point_in_rectangle(x1, y1, x2, y2, x3, y3, x4, y4, x, y) Source: src/quality_measurement/original/crossings.py A function to check whether point P(x, y) lies inside the rectangle formed by A(x1, y1), B(x2, y2), C(x3, y3) and D(x4, y4)","title":"check_point_in_rectangle"},{"location":"API/src/quality_measurement/original/crossings/#compute_intersection_point","text":"compute_intersection_point(x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4) Source: src/quality_measurement/original/crossings.py Computes the intersection point Note that the intersection point is for the infinitely long lines defined by the points, and can produce an intersection point beyond the lengths of the line segments but here we know that there is an intersection, and it is unique.","title":"compute_intersection_point"},{"location":"API/src/quality_measurement/original/crossings/#count_crossings","text":"count_crossings( G, edges_to_compare=None, stop_when_found=False, ignore_label_edge_cr=False ) Source: src/quality_measurement/original/crossings.py Counts the crossings of the given graph G< t>. The crossing count can be executed only on the given list of edges of G< t> passed as input in edges_to_compare< t>. Also the execution can stop as soon as a crossing is found if the boolean value stop_when_found< t> is set to True. If the vertices have labels with given height and width the crossings that occur below the labels can be ignored if the boolean value ignore_label_edge_cr< t> is set to True. Return a list of crossings where each element has the crossing edge and the intersection point.","title":"count_crossings"},{"location":"API/src/quality_measurement/original/crossings/#dointersect","text":"doIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py","title":"doIntersect"},{"location":"API/src/quality_measurement/original/crossings/#dosegmentsintersect","text":"doSegmentsIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py","title":"doSegmentsIntersect"},{"location":"API/src/quality_measurement/original/crossings/#getanglelineseg","text":"getAngleLineSeg(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py","title":"getAngleLineSeg"},{"location":"API/src/quality_measurement/original/crossings/#getanglelinesegdegree","text":"getAngleLineSegDegree(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py","title":"getAngleLineSegDegree"},{"location":"API/src/quality_measurement/original/crossings/#getintersection","text":"getIntersection(x11, y11, x12, y12, x21, y21, x22, y22) Source: src/quality_measurement/original/crossings.py","title":"getIntersection"},{"location":"API/src/quality_measurement/original/crossings/#get_rectangle","text":"get_rectangle(p1x, p1y, w_1, h_1) Source: src/quality_measurement/original/crossings.py Return the corner coordinates of the rectangle centered in p1x p1y and with width w_1 and h_1","title":"get_rectangle"},{"location":"API/src/quality_measurement/original/crossings/#iscolinear","text":"isColinear(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings.py","title":"isColinear"},{"location":"API/src/quality_measurement/original/crossings/#isendpoint","text":"isEndPoint(ux, uy, vx, vy, px, py) Source: src/quality_measurement/original/crossings.py","title":"isEndPoint"},{"location":"API/src/quality_measurement/original/crossings/#issamecoord","text":"isSameCoord(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py","title":"isSameCoord"},{"location":"API/src/quality_measurement/original/crossings/#onsegment","text":"onSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py","title":"onSegment"},{"location":"API/src/quality_measurement/original/crossings/#orientation","text":"orientation(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py","title":"orientation"},{"location":"API/src/quality_measurement/original/crossings/#remove_label_edge_crossings","text":"remove_label_edge_crossings(G, crossings_edges) Source: src/quality_measurement/original/crossings.py Removes from the given list the crossings between edges and labels Instead of starting from the vertex position, the edges start from the boundary of the labels.","title":"remove_label_edge_crossings"},{"location":"API/src/quality_measurement/original/crossings/#slope","text":"slope(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py","title":"slope"},{"location":"API/src/quality_measurement/original/crossings/#strictlyonsegment","text":"strictlyOnSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings.py","title":"strictlyOnSegment"},{"location":"API/src/quality_measurement/original/crossings/#to_deg","text":"to_deg(rad) Source: src/quality_measurement/original/crossings.py","title":"to_deg"},{"location":"API/src/quality_measurement/original/crossings/#triangle_area","text":"triangle_area(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings.py A utility function to calculate area of triangle formed by (x1, y1), (x2, y2) and (x3, y3)","title":"triangle_area"},{"location":"API/src/quality_measurement/original/crossings/#yint","text":"yInt(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings.py","title":"yInt"},{"location":"API/src/quality_measurement/original/crossings_old/","text":"src.quality_measurement.original.crossings_old \u00b6 areEdgesAdjacent \u00b6 areEdgesAdjacent(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py count_crossings \u00b6 count_crossings(G, ignore_labels=False) Source: src/quality_measurement/original/crossings_old.py Counts the number of crossings of the given Graph doIntersect \u00b6 doIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py doSegmentsIntersect \u00b6 doSegmentsIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py getAngleLineSeg \u00b6 getAngleLineSeg(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings_old.py getAngleLineSegDegree \u00b6 getAngleLineSegDegree(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings_old.py getIntersection \u00b6 getIntersection(x11, y11, x12, y12, x21, y21, x22, y22) Source: src/quality_measurement/original/crossings_old.py isColinear \u00b6 isColinear(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py isEndPoint \u00b6 isEndPoint(ux, uy, vx, vy, px, py) Source: src/quality_measurement/original/crossings_old.py isSameCoord \u00b6 isSameCoord(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py onSegment \u00b6 onSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py orientation \u00b6 orientation(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py slope \u00b6 slope(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py strictlyOnSegment \u00b6 strictlyOnSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py to_deg \u00b6 to_deg(rad) Source: src/quality_measurement/original/crossings_old.py yInt \u00b6 yInt(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py","title":"crossings_old"},{"location":"API/src/quality_measurement/original/crossings_old/#srcquality_measurementoriginalcrossings_old","text":"","title":"src.quality_measurement.original.crossings_old"},{"location":"API/src/quality_measurement/original/crossings_old/#areedgesadjacent","text":"areEdgesAdjacent(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py","title":"areEdgesAdjacent"},{"location":"API/src/quality_measurement/original/crossings_old/#count_crossings","text":"count_crossings(G, ignore_labels=False) Source: src/quality_measurement/original/crossings_old.py Counts the number of crossings of the given Graph","title":"count_crossings"},{"location":"API/src/quality_measurement/original/crossings_old/#dointersect","text":"doIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py","title":"doIntersect"},{"location":"API/src/quality_measurement/original/crossings_old/#dosegmentsintersect","text":"doSegmentsIntersect(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py","title":"doSegmentsIntersect"},{"location":"API/src/quality_measurement/original/crossings_old/#getanglelineseg","text":"getAngleLineSeg(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings_old.py","title":"getAngleLineSeg"},{"location":"API/src/quality_measurement/original/crossings_old/#getanglelinesegdegree","text":"getAngleLineSegDegree(x1, y1, x2, y2, x3, y3) Source: src/quality_measurement/original/crossings_old.py","title":"getAngleLineSegDegree"},{"location":"API/src/quality_measurement/original/crossings_old/#getintersection","text":"getIntersection(x11, y11, x12, y12, x21, y21, x22, y22) Source: src/quality_measurement/original/crossings_old.py","title":"getIntersection"},{"location":"API/src/quality_measurement/original/crossings_old/#iscolinear","text":"isColinear(p1x, p1y, q1x, q1y, p2x, p2y, q2x, q2y) Source: src/quality_measurement/original/crossings_old.py","title":"isColinear"},{"location":"API/src/quality_measurement/original/crossings_old/#isendpoint","text":"isEndPoint(ux, uy, vx, vy, px, py) Source: src/quality_measurement/original/crossings_old.py","title":"isEndPoint"},{"location":"API/src/quality_measurement/original/crossings_old/#issamecoord","text":"isSameCoord(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py","title":"isSameCoord"},{"location":"API/src/quality_measurement/original/crossings_old/#onsegment","text":"onSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py","title":"onSegment"},{"location":"API/src/quality_measurement/original/crossings_old/#orientation","text":"orientation(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py","title":"orientation"},{"location":"API/src/quality_measurement/original/crossings_old/#slope","text":"slope(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py","title":"slope"},{"location":"API/src/quality_measurement/original/crossings_old/#strictlyonsegment","text":"strictlyOnSegment(px, py, qx, qy, rx, ry) Source: src/quality_measurement/original/crossings_old.py","title":"strictlyOnSegment"},{"location":"API/src/quality_measurement/original/crossings_old/#to_deg","text":"to_deg(rad) Source: src/quality_measurement/original/crossings_old.py","title":"to_deg"},{"location":"API/src/quality_measurement/original/crossings_old/#yint","text":"yInt(x1, y1, x2, y2) Source: src/quality_measurement/original/crossings_old.py","title":"yInt"},{"location":"API/src/quality_measurement/original/graphconverter/gml2dot/","text":"src.quality_measurement.original.graphconverter.gml2dot \u00b6 set_graph_properties \u00b6 set_graph_properties(G) Source: src/quality_measurement/original/graphconverter/gml2dot.py Extracts the attributes of the vertices and edges from the gml data structure return the graph with the standard dot attributes","title":"gml2dot"},{"location":"API/src/quality_measurement/original/graphconverter/gml2dot/#srcquality_measurementoriginalgraphconvertergml2dot","text":"","title":"src.quality_measurement.original.graphconverter.gml2dot"},{"location":"API/src/quality_measurement/original/graphconverter/gml2dot/#set_graph_properties","text":"set_graph_properties(G) Source: src/quality_measurement/original/graphconverter/gml2dot.py Extracts the attributes of the vertices and edges from the gml data structure return the graph with the standard dot attributes","title":"set_graph_properties"},{"location":"API/src/quality_measurement/original/metricscomputer/","text":"src.quality_measurement.original.metricscomputer \u00b6","title":"metricscomputer"},{"location":"API/src/quality_measurement/original/metricscomputer/#srcquality_measurementoriginalmetricscomputer","text":"","title":"src.quality_measurement.original.metricscomputer"},{"location":"API/src/quality_measurement/original/stress/","text":"src.quality_measurement.original.stress \u00b6 computeScalingFactor \u00b6 computeScalingFactor(S, all_sp) Source: src/quality_measurement/original/stress.py euclidean_distance \u00b6 euclidean_distance(source, target) Source: src/quality_measurement/original/stress.py scale_graph \u00b6 scale_graph(G, alpha) Source: src/quality_measurement/original/stress.py stress \u00b6 stress(S, G=None, weighted=True, all_sp=None) Source: src/quality_measurement/original/stress.py Computes the strees of the layout S if the parameter G is passed it computes the stress of the layout S with respect the graph distances on G","title":"stress"},{"location":"API/src/quality_measurement/original/stress/#srcquality_measurementoriginalstress","text":"","title":"src.quality_measurement.original.stress"},{"location":"API/src/quality_measurement/original/stress/#computescalingfactor","text":"computeScalingFactor(S, all_sp) Source: src/quality_measurement/original/stress.py","title":"computeScalingFactor"},{"location":"API/src/quality_measurement/original/stress/#euclidean_distance","text":"euclidean_distance(source, target) Source: src/quality_measurement/original/stress.py","title":"euclidean_distance"},{"location":"API/src/quality_measurement/original/stress/#scale_graph","text":"scale_graph(G, alpha) Source: src/quality_measurement/original/stress.py","title":"scale_graph"},{"location":"API/src/quality_measurement/original/stress/#stress","text":"stress(S, G=None, weighted=True, all_sp=None) Source: src/quality_measurement/original/stress.py Computes the strees of the layout S if the parameter G is passed it computes the stress of the layout S with respect the graph distances on G","title":"stress"},{"location":"API/src/quality_measurement/original/uniformity_edge_length/","text":"src.quality_measurement.original.uniformity_edge_length \u00b6 avg_edge_length \u00b6 avg_edge_length(G) Source: src/quality_measurement/original/uniformity_edge_length.py Computes the average edge length of the given graph layout G uniformity_edge_length \u00b6 uniformity_edge_length(G) Source: src/quality_measurement/original/uniformity_edge_length.py The Edge length uniformity corresponds to the normalized standard deviation of the edge length.","title":"uniformity_edge_length"},{"location":"API/src/quality_measurement/original/uniformity_edge_length/#srcquality_measurementoriginaluniformity_edge_length","text":"","title":"src.quality_measurement.original.uniformity_edge_length"},{"location":"API/src/quality_measurement/original/uniformity_edge_length/#avg_edge_length","text":"avg_edge_length(G) Source: src/quality_measurement/original/uniformity_edge_length.py Computes the average edge length of the given graph layout G","title":"avg_edge_length"},{"location":"API/src/quality_measurement/original/uniformity_edge_length/#uniformity_edge_length","text":"uniformity_edge_length(G) Source: src/quality_measurement/original/uniformity_edge_length.py The Edge length uniformity corresponds to the normalized standard deviation of the edge length.","title":"uniformity_edge_length"},{"location":"API/src/transformations/","text":"src.transformations \u00b6","title":"transformations"},{"location":"API/src/transformations/#srctransformations","text":"","title":"src.transformations"},{"location":"API/src/transformations/graph/","text":"src.transformations.graph \u00b6 rotate \u00b6 rotate(graph:networkx.classes.graph.Graph, angle:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Rotates the given graph Parameters \u00b6 G : nx.graph The graph which you want to rotate angle : float Angle by which the graph should be rotated Returns \u00b6 networkx.classes.graph.Graph Returns the graph rotated by the given angle scale \u00b6 scale(graph:networkx.classes.graph.Graph, scaling_factor:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Scaled the graph by given factor Parameters \u00b6 G : nx.Graph The graph which need to be scaled scaling_factor : float Factor by which the graph should be scaled Returns \u00b6 networkx.classes.graph.Graph Graph after scaling it by given factor translate_graph \u00b6 translate_graph(graph:networkx.classes.graph.Graph, translation_dx:float, translation_dy:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Translated the given graph Parameters \u00b6 G : nx.Graph Graph that you want to translate translation_dx : float Value for the x-coordinate by which the graph need to be translated translation_dy : float Value for the x-coordinate by which the graph need to be translated Returns \u00b6 networkx.classes.graph.Graph Returns the translated graph","title":"graph"},{"location":"API/src/transformations/graph/#srctransformationsgraph","text":"","title":"src.transformations.graph"},{"location":"API/src/transformations/graph/#rotate","text":"rotate(graph:networkx.classes.graph.Graph, angle:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Rotates the given graph","title":"rotate"},{"location":"API/src/transformations/graph/#parameters","text":"G : nx.graph The graph which you want to rotate angle : float Angle by which the graph should be rotated","title":"Parameters"},{"location":"API/src/transformations/graph/#returns","text":"networkx.classes.graph.Graph Returns the graph rotated by the given angle","title":"Returns"},{"location":"API/src/transformations/graph/#scale","text":"scale(graph:networkx.classes.graph.Graph, scaling_factor:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Scaled the graph by given factor","title":"scale"},{"location":"API/src/transformations/graph/#parameters_1","text":"G : nx.Graph The graph which need to be scaled scaling_factor : float Factor by which the graph should be scaled","title":"Parameters"},{"location":"API/src/transformations/graph/#returns_1","text":"networkx.classes.graph.Graph Graph after scaling it by given factor","title":"Returns"},{"location":"API/src/transformations/graph/#translate_graph","text":"translate_graph(graph:networkx.classes.graph.Graph, translation_dx:float, translation_dy:float) -> networkx.classes.graph.Graph Source: src/transformations/graph.py Translated the given graph","title":"translate_graph"},{"location":"API/src/transformations/graph/#parameters_2","text":"G : nx.Graph Graph that you want to translate translation_dx : float Value for the x-coordinate by which the graph need to be translated translation_dy : float Value for the x-coordinate by which the graph need to be translated","title":"Parameters"},{"location":"API/src/transformations/graph/#returns_2","text":"networkx.classes.graph.Graph Returns the translated graph","title":"Returns"}]}